{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","require","config","ListAndExchangeAddress","FactoryAddress","App","state","MyBalances","sellers","amounts","prices","index","MyNbNFT","MyNFTids","MyColls","MyNames","MyHeights","MyHairs","MyURIs","contract1","contract2","contract3","NbCollecB","NbCollecC","collecB","collecC","NameB","NameC","TotalB","TotalC","NbNFT","nftIds","nftNames","nftUris","nftForSale","nftMinPrices","buffer","accounts","page","componentDidMount","eth","getAccounts","net","getId","networkId","NFTCollectionFactory","networks","instance1","Contract","abi","instance2","ListAndExchange","instance3","ArtistCollection","setState","runInit","alert","error","methods","NbCollC","call","CollecC","NFTID","pas","collectionsC","Collection","name","push","NbNFTinColl","nNFT","i","nft","NFT","uri","URI","mybal","bal","length","NbCollB","CollecB","collectionsB","balanceOf","CREATE","createNFTCollection","NAMEcreate","value","SYMBOL","send","from","APPROVE","NAMEapprove","setApprovalForAll","MINT","NAME","MintNFT","NFTname","NUMBER","HEIGHT","HAIR","SetURI","setURI","INDEX","SELL","Price","utils","toWei","PRICE","AMOUNT","sellID","SellNFT","SEEOFFERS","getSellers","buyID","Sellers","getAmounts","Amounts","getPrices","Prices","NbOffers","Index","Page","parseInt","BUY","POSITIVEINDEX","Amount","TotalPrice","Id","BuyNFT","this","className","Button","onClick","variant","style","display","justifyContent","Card","width","Header","Body","ListGroup","Item","Table","striped","bordered","hover","map","Form","Group","controlId","Control","type","id","ref","input","ID","Name","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.620fc759.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport ArtistCollection from \"./contracts/ArtistCollection.json\";\nimport NFTCollectionFactory from \"./contracts/NFTCollectionFactory.json\";\nimport ListAndExchange from \"./contracts/ListAndExchange.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nrequire('dotenv').config();\nconst ListAndExchangeAddress = \"0x03fcA423bEe1a907D01Fa4061954EeeCD9850067\";\nconst FactoryAddress = \"0x183e8A203a4CCaA0153987f4ec00e25a9dEeCe1E\";\n\n\n\nclass App extends Component {\n\n \n\n  state = {MyBalances:null, sellers:null, amounts:null, prices:null, index:null, MyNbNFT: null, MyNFTids: null, MyColls: null, MyNames: null, MyHeights: null, MyHairs: null, MyURIs: null, contract1: null, contract2: null, contract3: null,  NbCollecB: null, NbCollecC: null, collecB: null, collecC: null, NameB: null, NameC: null, TotalB: null, TotalC: null, NbNFT: null, nftIds: null, nftNames: null, nftUris: null, nftForSale: null, nftMinPrices: null, web3: null, buffer: null, accounts: null, page: 0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();  \n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = NFTCollectionFactory.networks[networkId];\n\n      const instance1 = new web3.eth.Contract(\n        NFTCollectionFactory.abi,\n        FactoryAddress, \n      );\n        const instance2 = new web3.eth.Contract(\n        ListAndExchange.abi,\n        ListAndExchangeAddress, \n      );\n\n      const instance3 = new web3.eth.Contract(\n        ArtistCollection.abi,\n        \"0xEA498c0d1dbcEA3819ef255b70579D727264F6fE\",\n      );\n\n      const page = this.state.page;\n      const sellers = [];\n      const amounts = [];\n      const prices = [];\n      const index = [];\n      const MyBalances = [];\n\n\n\n       \n      this.setState({ MyBalances:MyBalances, index:index, sellers:sellers, amounts:amounts, prices:prices, web3:web3, accounts:accounts, contract1: instance1, contract2: instance2, contract3: instance3, page:page, TotalC: null, TotalB: null, nftIds: null, nftNames: null, nftUris: null, nftForSale: null, nftMinPrices: null }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n  runInit = async() => {\n    const { web3, accounts, contract1, contract2, contract3} = this.state;\n    \n    console.log('page:', this.state.page);\n\n    const NbCollecC = await (contract2.methods.NbCollC(accounts[0])).call();\n    console.log('NbCollC', NbCollecC);\n    const MyNFTids = [];\n    const CollecC = [];\n    const NameC = [];\n    const TotalC = [];\n    const MyColls = [];\n    const MyNames = [];\n    const MyHeights = [];\n    const MyHairs = []\n    const MyURIs = [];\n    var NFTID = 0;\n    \n    for (let pas = 0; pas < NbCollecC; pas++) {\n      var Collection = await (contract2.methods.collectionsC(accounts[0],pas)).call(); \n      var instance3 = new web3.eth.Contract(\n        ArtistCollection.abi,\n        Collection,\n      );\n      var name = await instance3.methods.name().call();\n      NameC.push(name);\n      console.log('name+  +collection',name+\"     \"+Collection); \n      console.log('ligne85:pas=',pas);\n      CollecC.push(Collection);\n      TotalC.push(name+\"     \"+Collection);\n\n      //\n     \n      var nNFT = await instance3.methods.NbNFTinColl().call();\n      for (let i = 0; i < nNFT; i++) {\n        var NFT = await instance3.methods.nft(i).call();\n        var URI = await instance3.methods.uri(i).call();\n        console.log('NFT:',NFT); console.log('uri', URI);\n        MyColls.push(name);\n        MyNames.push(NFT[0]);\n        MyHeights.push(NFT[1]);\n        if (NFT[2]==true){MyHairs.push(\"YES\");} else {MyHairs.push(\"NO\");}       \n        MyURIs.push(URI);     \n        NFTID ++;\n        MyNFTids.push(NFTID);\n       \n      }\n\n    }\n\n\n\n    var mybal = [];\n    var bal = 0;\n\n   \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n    console.log('MyColls',MyColls);\n\n    const MyNbNFT = MyNames.length; \n\n    console.log('CollecC:', CollecC);\n    const collecC = CollecC;\n\n    const NbCollecB = await (contract2.methods.NbCollB(accounts[0])).call();\n    console.log('NbCollB', NbCollecB);\n    const CollecB = [];\n    const NameB = [];\n    const TotalB = [];\n    for (let pas = 0; pas < NbCollecB; pas++) {\n      var Collection = await (contract2.methods.collectionsB(accounts[0],pas)).call(); \n      var instance3 = new web3.eth.Contract(\n        ArtistCollection.abi,\n        Collection,\n      );\n      var name = await instance3.methods.name().call();\n      NameB.push(name);\n      \n      console.log(name); console.log(pas);\n      CollecB.push(Collection);\n      TotalB.push(name+\"     \"+Collection);\n    }\n\n   \n    console.log('CollecB:', CollecB);\n    const collecB = CollecB;\n\n    const NbNFT = await contract2.methods.NbNFT().call();\n    console.log('NbNFT:', NbNFT);\n    const nftNames = [];\n    const nftUris = [];\n    const nftIds = [];\n    const nftForSale = [];\n    const nftMinPrices = [];   \n    \n    \n    for (let pas = 0; pas < NbNFT; pas++) {\n      var NFT = await contract2.methods.nft(pas).call();\n      console.log(NFT); //console.log(NFT[3]); \n      //var id = NFT[5]; //id=pas\n      //var sellers = await contract2.methods.getSellers(pas).call();\n      //var NbSellers = sellers.length;\n      //console.log('sellers:', sellers);\n      var Collection = NFT[0];\n      var instance3 = new web3.eth.Contract(\n        ArtistCollection.abi,\n        Collection,\n      );\n      var name = await instance3.methods.name().call();\n      NameB.push(name);\n      var bal = await instance3.methods.balanceOf(accounts[0],NFT[4]).call();\n      mybal.push(bal);\n      nftIds.push(NFT[5]);\n      nftNames.push(NFT[2]);\n      nftUris.push(NFT[3]);\n      nftForSale.push(NFT[7]);\n      nftMinPrices.push(NFT[8]/10**18);\n    }\n\n    const MyBalances = mybal;\n     console.log('MyBalances', MyBalances);  \n\n    //const NbNFTinColl = await contract3.methods.NbNFTinColl().call();\n    //console.log('NbNFTinColl:', NbNFTinColl);\n    // Mettre à jour le state \n   this.setState({ MyBalances:MyBalances, MyNbNFT:MyNbNFT, MyNFTids:MyNFTids,  MyColls:MyColls, MyNames:MyNames, MyHeights:MyHeights, MyHairs:MyHairs, MyURIs:MyURIs, contract1:contract1, contract2:contract2, contract3:contract3, NbCollecB, NbCollecC, collecB:collecB, collecC:collecC, NameB:NameB, NameC:NameC, TotalB:TotalB, TotalC:TotalC, NbNFT:NbNFT, nftIds:nftIds, nftNames:nftNames, nftUris:nftUris, nftForSale:nftForSale, nftMinPrices:nftMinPrices}); \n  }; \n\n\n\n  CREATE = async() => {\n    const { accounts, contract1, web3 } = this.state;\n    await contract1.methods.createNFTCollection(this.NAMEcreate.value, this.SYMBOL.value).send({from: accounts[0]});\n    this.runInit();\n  }\n\n  APPROVE = async() => {\n    const { accounts, web3, NbCollecC, collecC, NameC } = this.state;\n    var Done = false; var index=0; var pas=0;\n    for(pas=0; pas<NbCollecC; pas++ ) {\n      if(NameC[pas]==this.NAMEapprove.value) {\n        Done=true; index=pas;\n      }\n    }\n    console.log('collecC', collecC);\n    console.log('NbCollecC',NbCollecC);\n    console.log('index', index); console.log(\"collecC[index]\",collecC[index]);\n    const instance3 = new web3.eth.Contract(\n      ArtistCollection.abi,\n      collecC[index],\n    );\n    await instance3.methods.setApprovalForAll(ListAndExchangeAddress,true).send({from: accounts[0]});\n    this.runInit();\n  }\n\n  MINT = async() => {\n    const { accounts, web3, NbCollecC, collecC, NameC } = this.state;\n    var Done = false; var index=0; var pas=0;\n    for(pas=0; pas<NbCollecC; pas++ ) {\n      if(NameC[pas]==this.NAME.value) {\n        Done=true; index=pas;\n      }\n    }\n    console.log('collecC', collecC);\n    console.log('NbCollecC',NbCollecC);\n    console.log('index', index); console.log(\"collecC[index]\",collecC[index]);\n    const instance3 = new web3.eth.Contract(\n      ArtistCollection.abi,\n      collecC[index],\n    );\n    await instance3.methods.MintNFT(this.NFTname.value,this.NUMBER.value, this.HEIGHT.value, this.HAIR.value).send({from: accounts[0]});\n    \n    this.runInit();\n  }\n\n  SetURI = async() => {\n    const { accounts, web3, NbCollecC, collecC, NameC } = this.state;\n    var Done = false; var index=0; var pas=0;\n    for(pas=0; pas<NbCollecC; pas++ ) {\n      if(NameC[pas]==this.NAME.value) {\n        Done=true; index=pas;\n      }\n    }\n    console.log('collecC', collecC);\n\n    const instance3 = new web3.eth.Contract(\n      ArtistCollection.abi,\n      collecC[index],\n    );\n    await instance3.methods.setURI(this.URI.value,this.INDEX.value).send({from: accounts[0]});\n    \n    this.runInit();\n  }\n\n  SELL = async() => {\n    const { accounts, web3, contract2 } = this.state;\n    const Price = web3.utils.toWei(this.PRICE.value, 'ether');  \nconsole.log('Price',Price); console.log('Amount', this.AMOUNT.value); console.log('sellID', this.sellID);\n    \n    await contract2.methods.SellNFT(this.sellID.value, Price, this.AMOUNT.value).send({from: accounts[0]});\n    \n    this.runInit();\n  }\n\n  SEEOFFERS = async() => {\n    const {contract2} = this.state; \n    const Sellers = await contract2.methods.getSellers(this.buyID.value).call();\n    const Amounts = await contract2.methods.getAmounts(this.buyID.value).call();\n    const Prices = await contract2.methods.getPrices(this.buyID.value).call();\n    const NbOffers = Sellers.length;\n    var Index = [];\n    var i=0;\n    for (i=0;i<NbOffers;i++){Index.push(i+1);}\n    console.log('sellers', Sellers);\n    console.log('sellers.length', Sellers.length);\n    const Page = parseInt(this.buyID.value) + 4; \n    console.log('Page:',Page);\n    this.setState({index:Index, sellers:Sellers, amounts:Amounts, prices:Prices, page:Page});\n    //this.runInit();\n  }\n\n  BUY = async() => {\n    const{contract2, prices, accounts} = this.state;\n    console.log('PosInd',this.POSITIVEINDEX);\n    console.log('PosInd.value',this.POSITIVEINDEX.value);\n    console.log('AMOUNT.value', this.AMOUNT.value);\n    console.log('AMOUNT', this.AMOUNT);\n    const Index = parseInt(this.POSITIVEINDEX.value)-1;\n    console.log('index',Index);\n    const Amount = parseInt(this.AMOUNT.value);\n    const Price = parseInt(prices[Index]);\n    const TotalPrice = Amount*Price;\n    const Id = parseInt(this.state.page)-4;\n    console.log('TotalPrice',TotalPrice);\n    await contract2.methods.BuyNFT(Id, Index, Amount).send({from: accounts[0], value:TotalPrice});\n    \n    this.runInit();\n\n  }\n\n\n\n  render() {\n    \n   \n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    const { contract1, contract2} = this.state;\n\n    if (this.state.page==0) {\n    const { contract3} = this.state;\n    return (\n      <div className=\"App\">\n\n          <Button onClick={() => this.setState({ page: 0 })} variant=\"dark\"> Home </Button>\n          <Button onClick={() => this.setState({ page: 1 })} variant=\"dark\"> Collections </Button>\n          <Button onClick={() => this.setState({ page: 2 })} variant=\"dark\"> NFT </Button>\n          <Button onClick={() => this.setState({ page: 3 })} variant=\"dark\"> NFT from my Collections </Button>\n          \n\n        <div>\n            <h2 className=\"text-center\"> HOME </h2>\n            <hr></hr>\n            \n            <br></br>\n        </div>   \n\n        <br></br>\n\n\n      </div>\n    );}\n\n    if (this.state.page==1) {\n      const {collecC, collecB, NameC, NameB, TotalB, TotalC} = this.state;\n      \n      return (\n        <><div className=\"App\">\n\n          <Button onClick={() => this.setState({ page: 0 })} variant=\"dark\"> Home </Button>\n          <Button onClick={() => this.setState({ page: 1 })} variant=\"dark\"> Collections </Button>\n          <Button onClick={() => this.setState({ page: 2 })} variant=\"dark\"> NFT </Button>\n          <Button onClick={() => this.setState({ page: 3 })} variant=\"dark\"> NFT from my Collections </Button>\n          \n\n          <div>\n            <h2 className=\"text-center\"> COLLECTIONS </h2>\n            <hr></hr>\n            <br></br>\n          </div>\n\n          <br></br>\n\n\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>List of the collections you created:</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n\n                      <tbody>\n                        {TotalC !== null &&\n                          TotalC.map((a) => <tr><td>  {a} </td></tr>)}\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div>\n          <br></br>\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>List of the collections in which you own NFT:</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n\n                      <tbody>\n                        {TotalC !== null &&\n                          TotalB.map((a) => <tr><td>  {a} </td></tr>)}\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div>\n          <br></br>\n\n         <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>I want to create the collection:</strong></Card.Header>\n              <Card.Header><strong>Name:</strong></Card.Header>\n              <Card.Body>\n                <Form.Group controlId=\"formName\">\n                  <Form.Control type=\"text\" id=\"NAME\"\n                    ref={(input) => { this.NAMEcreate = input; } } />\n                </Form.Group>\n                <Card.Header><strong>Symbol:</strong></Card.Header>\n                <Form.Group controlId=\"formSymbol\">\n                  <Form.Control type=\"text\" id=\"SYMBOL\"\n                    ref={(input) => { this.SYMBOL = input; } } />\n                </Form.Group>\n                <h2 className=\"text-center\"> <Button onClick={this.CREATE} variant=\"dark\"> CREATE </Button></h2>\n              </Card.Body>\n            </Card>\n            <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>I want to approve the collection:</strong></Card.Header>\n              <Card.Header><strong>Name:</strong></Card.Header>\n              <Card.Body>\n                <Form.Group controlId=\"formName2\">\n                  <Form.Control type=\"text\" id=\"NAME2\"\n                    ref={(input) => { this.NAMEapprove = input; } } />\n                </Form.Group>\n                \n                <h2 className=\"text-center\"> <Button onClick={this.APPROVE} variant=\"dark\"> APPROVE </Button></h2>\n              </Card.Body>\n            </Card>\n          \n            <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>I want to Mint in the collection:</strong></Card.Header>\n              <Card.Header><strong>Collection Name:</strong></Card.Header>\n              <Card.Body>\n                <Form.Group controlId=\"formName2\">\n                  <Form.Control type=\"text\" id=\"NAME3\"\n                    ref={(input) => { this.NAME = input; } } />\n                </Form.Group>\n                <Card.Header><strong>NFT Name:</strong></Card.Header>\n              <Card.Body>\n                <Form.Group controlId=\"formName2\">\n                  <Form.Control type=\"text\" id=\"NAME3\"\n                    ref={(input) => { this.NFTname = input; } } />\n                </Form.Group>\n                <Card.Header><strong>Number:</strong></Card.Header>\n                <Card.Body>\n                <Form.Group controlId=\"formSymbol\">\n                  <Form.Control type=\"text\" id=\"num\"\n                    ref={(input) => { this.NUMBER = input; } } />\n                </Form.Group>\n                <Card.Header><strong>Height:</strong></Card.Header>\n                <Form.Group controlId=\"formSymbol\">\n                  <Form.Control type=\"text\" id=\"hei\"\n                    ref={(input) => { this.HEIGHT = input; } } />\n                </Form.Group>\n                <Card.Header><strong>Hair:</strong></Card.Header>\n                <Form.Group controlId=\"formSymbol\">\n                  <Form.Control type=\"text\" id=\"hair\"\n                    ref={(input) => { this.HAIR = input; } } />\n                </Form.Group>\n                <h2 className=\"text-center\"> <Button onClick={this.MINT} variant=\"dark\"> MINT </Button></h2>\n              </Card.Body>\n              </Card.Body>\n              </Card.Body>\n              </Card>\n          \n          </div>\n          \n          </div>\n          \n          \n          \n          </>\n          \n\n      );}\n\n      if (this.state.page==2) {\n        const {nftIds, nftNames, nftUris, nftForSale, nftMinPrices, MyBalances} = this.state;\n        \n        return (\n          <><div className=\"App\">\n    \n          <Button onClick={() => this.setState({ page: 0 })} variant=\"dark\"> Home </Button>\n          <Button onClick={() => this.setState({ page: 1 })} variant=\"dark\"> Collections </Button>\n          <Button onClick={() => this.setState({ page: 2 })} variant=\"dark\"> NFT </Button>\n          <Button onClick={() => this.setState({ page: 3 })} variant=\"dark\"> NFT from my Collections </Button>\n        \n\n          \n        <div>\n            <h2 className=\"text-center\"> NFT </h2>\n            <hr></hr>\n            <br></br>\n        </div>   \n\n        <br></br>\n    \n  \n        <div style={{display: 'flex', justifyContent: 'center'}}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>List of NFT on the Exchange:</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                 \n                  <Table striped bordered hover>\n                  <tbody>\n                   Id   //   Name   //    Uri   //    For Sale   //    Min Price(ETH) \n                  </tbody>\n                      \n                      <tbody>\n                        {nftIds !== null && \n                          nftIds.map((a) => <><tr><td>  {a} {\" \"} {nftNames[a]}{\" \"} {nftUris[a]}{\" \"} {nftForSale[a]}{\" \"} {nftMinPrices[a]}{\"  / my balance:\"}{MyBalances[a]} </td></tr></>)\n                        }\n                      </tbody>\n                      </Table>  \n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div>\n          <br></br>   \n  \n           <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>I want to Sell:</strong></Card.Header>\n                <Card.Header><strong>Id:</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formName23\">\n                    <Form.Control type=\"text\" id=\"NAME37\"\n                      ref={(input) => { this.sellID = input; } } />\n                  </Form.Group>\n                  <Card.Header><strong>Price (ETH):</strong></Card.Header>\n                  <Form.Group controlId=\"formSymbol\">\n                    <Form.Control type=\"text\" id=\"SYMBOL\"\n                      ref={(input) => { this.PRICE = input; } } />\n                  </Form.Group>\n                  <Card.Header><strong>Amount:</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formName\">\n                    <Form.Control type=\"text\" id=\"NAME\"\n                      ref={(input) => { this.AMOUNT = input; } } />\n                  </Form.Group>\n                  <h2 className=\"text-center\"> <Button onClick={this.SELL} variant=\"dark\"> SELL </Button></h2>\n                </Card.Body>\n                </Card.Body>\n              </Card>\n             \n              \n              <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>I want to Buy:</strong></Card.Header>\n                <Card.Header><strong>Id:</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formName\">\n                    <Form.Control type=\"text\" id=\"NAME\"\n                      ref={(input) => { this.buyID = input; } } />\n                  </Form.Group>\n                  \n                <Card.Body>\n                  \n                  <h2 className=\"text-center\"> <Button onClick={this.SEEOFFERS} variant=\"dark\"> See Offers </Button></h2>\n                </Card.Body>\n                </Card.Body>\n              </Card>\n\n    \n            \n            \n            </div>\n            \n            </div>\n            \n            \n            \n            </>\n            \n  \n        );}\n  \n\n        if (this.state.page==3) {\n          const {MyNFTids, MyColls, MyNames, MyHeights, MyHairs, MyURIs} = this.state;\n          \n          return (\n            <><div className=\"App\">\n\n          <Button onClick={() => this.setState({ page: 0 })} variant=\"dark\"> Home </Button>\n          <Button onClick={() => this.setState({ page: 1 })} variant=\"dark\"> Collections </Button>\n          <Button onClick={() => this.setState({ page: 2 })} variant=\"dark\"> NFT </Button>\n          <Button onClick={() => this.setState({ page: 3 })} variant=\"dark\"> NFT from my Collections </Button>\n     \n\n\n              <div>\n                <h2 className=\"text-center\"> NFT from my Collections </h2>\n                <hr></hr>\n                <br></br>\n              </div>\n\n              <br></br>\n\n\n              <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <Card style={{ width: '50rem' }}>\n                  <Card.Header><strong>     </strong></Card.Header>\n                  <Card.Body>\n                    <ListGroup variant=\"flush\">\n                      <ListGroup.Item>\n\n                        <Table striped bordered hover>\n                          <tbody>\n                            Collection   //   Name   //    Height  //   Has Hair ?   //    URI\n                          </tbody>\n\n                          <tbody>\n                            {MyColls !== null &&\n                              MyNFTids.map((a) => <><tr><td>  {MyColls[a - 1]} {\" //  \"} {MyNames[a - 1]}{\"  //  \"} {MyHeights[a - 1]}{\"  // \"} {MyHairs[a - 1]}{\" //  \"} {MyURIs[a - 1]} </td></tr></>)}\n                          </tbody>\n                        </Table>\n                      </ListGroup.Item>\n                    </ListGroup>\n                  </Card.Body>\n                </Card>\n              </div>\n              <br></br>\n            </div>\n              <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <Card style={{ width: '50rem' }}>\n                  <Card.Header><strong>I want to set an immutable URI for :</strong></Card.Header>\n                  <Card.Header><strong>Name of collection:</strong></Card.Header>\n                  <Card.Body>\n                    <Form.Group controlId=\"formName\">\n                      <Form.Control type=\"text\" id=\"NAME\"\n                        ref={(input) => { this.NAME = input; } } />\n                    </Form.Group>\n                    <Card.Header><strong>Index in Collection:</strong></Card.Header>\n                    <Form.Group controlId=\"formSymbol\">\n                      <Form.Control type=\"text\" id=\"index\"\n                        ref={(input) => { this.INDEX = input; } } />\n                    </Form.Group>\n                    <Card.Header><strong>{\"URI (beware that you can't change it, never):\"}</strong></Card.Header>\n                    <Form.Group controlId=\"formSymbol\">\n                      <Form.Control type=\"text\" id=\"index\"\n                        ref={(input) => { this.URI = input; } } />\n                    </Form.Group>\n                    <h2 className=\"text-center\"> <Button onClick={this.SetURI} variant=\"dark\"> Set URI </Button></h2>\n                  </Card.Body>\n                </Card>\n\n              </div></>\n\n        );}\n          \n          else {\n            const {page, nftNames, sellers, amounts, prices, index} = this.state;\n            const ID = page-4;\n            const Name = nftNames[ID];\n            console.log('sellers',sellers);\n            console.log('Name:', Name);\n            console.log('ID:',ID);\n            console.log('index',index);\n            \n            return (\n              <div className=\"App\">\n        \n          <Button onClick={() => this.setState({ page: 0 })} variant=\"dark\"> Home </Button>\n          <Button onClick={() => this.setState({ page: 1 })} variant=\"dark\"> Collections </Button>\n          <Button onClick={() => this.setState({ page: 2 })} variant=\"dark\"> NFT </Button>\n          <Button onClick={() => this.setState({ page: 3 })} variant=\"dark\"> NFT from my Collections </Button>\n  \n        \n      \n                <div style={{display: 'flex', justifyContent: 'center'}}>\n                <Card style={{ width: '50rem' }}>\n                  <Card.Header><strong>{\"Id = \"}{ ID}{\"; Name =  \"}{Name}{\";  \"}List of Offers:</strong></Card.Header>\n                  <Card.Body>\n                    <ListGroup variant=\"flush\">\n                      <ListGroup.Item>\n                      <Table striped bordered hover>\n                      <tbody>\n                           Index {\"  //  \"} Seller {\"  //  \"} Amount {\"  //  \"} Price\n                          </tbody>\n                          \n                          <tbody>\n                            {index !== null && \n                              index.map((a) => <tr><td>  {a} {\"  //  \"}{sellers[a-1]} {\"  //  \"}{amounts[a-1]}{\"  //  \"}{prices[a-1]/10**18}</td></tr>)\n                            }\n                          </tbody>\n                          </Table>  \n                      </ListGroup.Item>\n                    </ListGroup>\n                  </Card.Body>\n                </Card>\n              </div>\n              <br></br>\n              <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <Card style={{ width: '50rem' }}>\n                  <Card.Header><strong>I want to buy :</strong></Card.Header>\n                  <Card.Header><strong>Offer Number:</strong></Card.Header>\n                  <Card.Body>\n                    <Form.Group controlId=\"formName\">\n                      <Form.Control type=\"text\" id=\"NAME\"\n                        ref={(input) => { this.POSITIVEINDEX = input; } } />\n                    </Form.Group>\n                    <Card.Header><strong>Amount:</strong></Card.Header>\n                    <Form.Group controlId=\"formSymbol\">\n                      <Form.Control type=\"text\" id=\"index\"\n                        ref={(input) => { this.AMOUNT = input; } } />\n                    </Form.Group>\n                    \n                    <h2 className=\"text-center\"> <Button onClick={this.BUY} variant=\"dark\"> BUY </Button></h2>\n                  </Card.Body>\n                </Card>\n\n              </div>\n\n\n\n\n\n\n              </div>\n\n              \n            );}\n\n            \n\n              \n            \n  \n\n\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}